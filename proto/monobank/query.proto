syntax = "proto3";
package evgeniyscherbina.cosmosevm.monobank;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "monobank/params.proto";
import "monobank/balance.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/evgeniy-scherbina/cosmosevm/x/monobank/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/evgeniy-scherbina/cosmosevm/monobank/params";
  }
  // Queries a Balance by index.
	rpc Balance(QueryGetBalanceRequest) returns (QueryGetBalanceResponse) {
		option (google.api.http).get = "/evgeniy-scherbina/cosmosevm/monobank/balance/{address}";
	}

	// Queries a list of Balance items.
	rpc BalanceAll(QueryAllBalanceRequest) returns (QueryAllBalanceResponse) {
		option (google.api.http).get = "/evgeniy-scherbina/cosmosevm/monobank/balance";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetBalanceRequest {
	  string address = 1;

}

message QueryGetBalanceResponse {
	Balance balance = 1 [(gogoproto.nullable) = false];
}

message QueryAllBalanceRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllBalanceResponse {
	repeated Balance balance = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
